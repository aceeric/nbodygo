// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        (unknown)
// source: nbodyservice.proto

package nbodygrpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CollisionBehaviorEnum int32

const (
	CollisionBehaviorEnum_UNDEF    CollisionBehaviorEnum = 0
	CollisionBehaviorEnum_NONE     CollisionBehaviorEnum = 1
	CollisionBehaviorEnum_SUBSUME  CollisionBehaviorEnum = 2
	CollisionBehaviorEnum_ELASTIC  CollisionBehaviorEnum = 3
	CollisionBehaviorEnum_FRAGMENT CollisionBehaviorEnum = 4
)

// Enum value maps for CollisionBehaviorEnum.
var (
	CollisionBehaviorEnum_name = map[int32]string{
		0: "UNDEF",
		1: "NONE",
		2: "SUBSUME",
		3: "ELASTIC",
		4: "FRAGMENT",
	}
	CollisionBehaviorEnum_value = map[string]int32{
		"UNDEF":    0,
		"NONE":     1,
		"SUBSUME":  2,
		"ELASTIC":  3,
		"FRAGMENT": 4,
	}
)

func (x CollisionBehaviorEnum) Enum() *CollisionBehaviorEnum {
	p := new(CollisionBehaviorEnum)
	*p = x
	return p
}

func (x CollisionBehaviorEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollisionBehaviorEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_nbodyservice_proto_enumTypes[0].Descriptor()
}

func (CollisionBehaviorEnum) Type() protoreflect.EnumType {
	return &file_nbodyservice_proto_enumTypes[0]
}

func (x CollisionBehaviorEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollisionBehaviorEnum.Descriptor instead.
func (CollisionBehaviorEnum) EnumDescriptor() ([]byte, []int) {
	return file_nbodyservice_proto_rawDescGZIP(), []int{0}
}

type BodyColorEnum int32

const (
	BodyColorEnum_NOCOLOR   BodyColorEnum = 0
	BodyColorEnum_RANDOM    BodyColorEnum = 1
	BodyColorEnum_BLACK     BodyColorEnum = 2
	BodyColorEnum_WHITE     BodyColorEnum = 3
	BodyColorEnum_DARKGRAY  BodyColorEnum = 4
	BodyColorEnum_GRAY      BodyColorEnum = 5
	BodyColorEnum_LIGHTGRAY BodyColorEnum = 6
	BodyColorEnum_RED       BodyColorEnum = 7
	BodyColorEnum_GREEN     BodyColorEnum = 8
	BodyColorEnum_BLUE      BodyColorEnum = 9
	BodyColorEnum_YELLOW    BodyColorEnum = 10
	BodyColorEnum_MAGENTA   BodyColorEnum = 11
	BodyColorEnum_CYAN      BodyColorEnum = 12
	BodyColorEnum_ORANGE    BodyColorEnum = 13
	BodyColorEnum_BROWN     BodyColorEnum = 14
	BodyColorEnum_PINK      BodyColorEnum = 15
)

// Enum value maps for BodyColorEnum.
var (
	BodyColorEnum_name = map[int32]string{
		0:  "NOCOLOR",
		1:  "RANDOM",
		2:  "BLACK",
		3:  "WHITE",
		4:  "DARKGRAY",
		5:  "GRAY",
		6:  "LIGHTGRAY",
		7:  "RED",
		8:  "GREEN",
		9:  "BLUE",
		10: "YELLOW",
		11: "MAGENTA",
		12: "CYAN",
		13: "ORANGE",
		14: "BROWN",
		15: "PINK",
	}
	BodyColorEnum_value = map[string]int32{
		"NOCOLOR":   0,
		"RANDOM":    1,
		"BLACK":     2,
		"WHITE":     3,
		"DARKGRAY":  4,
		"GRAY":      5,
		"LIGHTGRAY": 6,
		"RED":       7,
		"GREEN":     8,
		"BLUE":      9,
		"YELLOW":    10,
		"MAGENTA":   11,
		"CYAN":      12,
		"ORANGE":    13,
		"BROWN":     14,
		"PINK":      15,
	}
)

func (x BodyColorEnum) Enum() *BodyColorEnum {
	p := new(BodyColorEnum)
	*p = x
	return p
}

func (x BodyColorEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BodyColorEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_nbodyservice_proto_enumTypes[1].Descriptor()
}

func (BodyColorEnum) Type() protoreflect.EnumType {
	return &file_nbodyservice_proto_enumTypes[1]
}

func (x BodyColorEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BodyColorEnum.Descriptor instead.
func (BodyColorEnum) EnumDescriptor() ([]byte, []int) {
	return file_nbodyservice_proto_rawDescGZIP(), []int{1}
}

type ResultCode_ResultCodeEnum int32

const (
	ResultCode_OK    ResultCode_ResultCodeEnum = 0
	ResultCode_ERROR ResultCode_ResultCodeEnum = 1
)

// Enum value maps for ResultCode_ResultCodeEnum.
var (
	ResultCode_ResultCodeEnum_name = map[int32]string{
		0: "OK",
		1: "ERROR",
	}
	ResultCode_ResultCodeEnum_value = map[string]int32{
		"OK":    0,
		"ERROR": 1,
	}
)

func (x ResultCode_ResultCodeEnum) Enum() *ResultCode_ResultCodeEnum {
	p := new(ResultCode_ResultCodeEnum)
	*p = x
	return p
}

func (x ResultCode_ResultCodeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultCode_ResultCodeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_nbodyservice_proto_enumTypes[2].Descriptor()
}

func (ResultCode_ResultCodeEnum) Type() protoreflect.EnumType {
	return &file_nbodyservice_proto_enumTypes[2]
}

func (x ResultCode_ResultCodeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultCode_ResultCodeEnum.Descriptor instead.
func (ResultCode_ResultCodeEnum) EnumDescriptor() ([]byte, []int) {
	return file_nbodyservice_proto_rawDescGZIP(), []int{6, 0}
}

// Holds the values of configurables
type CurrentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bodies                 int64   `protobuf:"varint,1,opt,name=bodies,proto3" json:"bodies,omitempty"`
	ResultQueueSize        int64   `protobuf:"varint,2,opt,name=result_queue_size,json=resultQueueSize,proto3" json:"result_queue_size,omitempty"`
	ComputationThreads     int64   `protobuf:"varint,3,opt,name=computation_threads,json=computationThreads,proto3" json:"computation_threads,omitempty"`
	SmoothingFactor        float32 `protobuf:"fixed32,4,opt,name=smoothing_factor,json=smoothingFactor,proto3" json:"smoothing_factor,omitempty"`
	RestitutionCoefficient float32 `protobuf:"fixed32,6,opt,name=restitution_coefficient,json=restitutionCoefficient,proto3" json:"restitution_coefficient,omitempty"`
}

func (x *CurrentConfig) Reset() {
	*x = CurrentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nbodyservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentConfig) ProtoMessage() {}

func (x *CurrentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_nbodyservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentConfig.ProtoReflect.Descriptor instead.
func (*CurrentConfig) Descriptor() ([]byte, []int) {
	return file_nbodyservice_proto_rawDescGZIP(), []int{0}
}

func (x *CurrentConfig) GetBodies() int64 {
	if x != nil {
		return x.Bodies
	}
	return 0
}

func (x *CurrentConfig) GetResultQueueSize() int64 {
	if x != nil {
		return x.ResultQueueSize
	}
	return 0
}

func (x *CurrentConfig) GetComputationThreads() int64 {
	if x != nil {
		return x.ComputationThreads
	}
	return 0
}

func (x *CurrentConfig) GetSmoothingFactor() float32 {
	if x != nil {
		return x.SmoothingFactor
	}
	return 0
}

func (x *CurrentConfig) GetRestitutionCoefficient() float32 {
	if x != nil {
		return x.RestitutionCoefficient
	}
	return 0
}

// All the params required to represent a body in the simulation
type BodyDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ignored on create
	X                 float32               `protobuf:"fixed32,2,opt,name=x,proto3" json:"x,omitempty"`
	Y                 float32               `protobuf:"fixed32,3,opt,name=y,proto3" json:"y,omitempty"`
	Z                 float32               `protobuf:"fixed32,4,opt,name=z,proto3" json:"z,omitempty"`
	Vx                float32               `protobuf:"fixed32,5,opt,name=vx,proto3" json:"vx,omitempty"`
	Vy                float32               `protobuf:"fixed32,6,opt,name=vy,proto3" json:"vy,omitempty"`
	Vz                float32               `protobuf:"fixed32,7,opt,name=vz,proto3" json:"vz,omitempty"`
	Mass              float32               `protobuf:"fixed32,8,opt,name=mass,proto3" json:"mass,omitempty"`
	Radius            float32               `protobuf:"fixed32,9,opt,name=radius,proto3" json:"radius,omitempty"`
	IsSun             bool                  `protobuf:"varint,10,opt,name=is_sun,json=isSun,proto3" json:"is_sun,omitempty"`
	CollisionBehavior CollisionBehaviorEnum `protobuf:"varint,11,opt,name=collision_behavior,json=collisionBehavior,proto3,enum=CollisionBehaviorEnum" json:"collision_behavior,omitempty"`
	BodyColor         BodyColorEnum         `protobuf:"varint,12,opt,name=body_color,json=bodyColor,proto3,enum=BodyColorEnum" json:"body_color,omitempty"`
	FragFactor        float32               `protobuf:"fixed32,13,opt,name=frag_factor,json=fragFactor,proto3" json:"frag_factor,omitempty"`
	FragStep          float32               `protobuf:"fixed32,14,opt,name=frag_step,json=fragStep,proto3" json:"frag_step,omitempty"`
	WithTelemetry     bool                  `protobuf:"varint,15,opt,name=with_telemetry,json=withTelemetry,proto3" json:"with_telemetry,omitempty"`
	Name              string                `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
	Class             string                `protobuf:"bytes,17,opt,name=class,proto3" json:"class,omitempty"`
	Pinned            bool                  `protobuf:"varint,18,opt,name=pinned,proto3" json:"pinned,omitempty"`
}

func (x *BodyDescription) Reset() {
	*x = BodyDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nbodyservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyDescription) ProtoMessage() {}

func (x *BodyDescription) ProtoReflect() protoreflect.Message {
	mi := &file_nbodyservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyDescription.ProtoReflect.Descriptor instead.
func (*BodyDescription) Descriptor() ([]byte, []int) {
	return file_nbodyservice_proto_rawDescGZIP(), []int{1}
}

func (x *BodyDescription) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BodyDescription) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *BodyDescription) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *BodyDescription) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *BodyDescription) GetVx() float32 {
	if x != nil {
		return x.Vx
	}
	return 0
}

func (x *BodyDescription) GetVy() float32 {
	if x != nil {
		return x.Vy
	}
	return 0
}

func (x *BodyDescription) GetVz() float32 {
	if x != nil {
		return x.Vz
	}
	return 0
}

func (x *BodyDescription) GetMass() float32 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *BodyDescription) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *BodyDescription) GetIsSun() bool {
	if x != nil {
		return x.IsSun
	}
	return false
}

func (x *BodyDescription) GetCollisionBehavior() CollisionBehaviorEnum {
	if x != nil {
		return x.CollisionBehavior
	}
	return CollisionBehaviorEnum_UNDEF
}

func (x *BodyDescription) GetBodyColor() BodyColorEnum {
	if x != nil {
		return x.BodyColor
	}
	return BodyColorEnum_NOCOLOR
}

func (x *BodyDescription) GetFragFactor() float32 {
	if x != nil {
		return x.FragFactor
	}
	return 0
}

func (x *BodyDescription) GetFragStep() float32 {
	if x != nil {
		return x.FragStep
	}
	return 0
}

func (x *BodyDescription) GetWithTelemetry() bool {
	if x != nil {
		return x.WithTelemetry
	}
	return false
}

func (x *BodyDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BodyDescription) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *BodyDescription) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

// Modify body properties. To modify by ID, pass the ID and omit name and class:
//   ModBody "id: 1 p: 'radius=100'"
// To modify by name or class, pass the ID as -1, and provide name or class:
//   ModBody "id: -1 name='jupiter' p: 'radius=100'"
// ID has to be passed in this case because the cli tool (or the protobuf protocol?) passes a non-specified
// int field as zero, which happens to be a valid body ID pretty much all the time...
// Pass an array of params via the cli by repeating the 'p' message:
//   ModBody "id: 1 p: 'radius=100' p: 'vx=200' p: 'collision=NONE'"
type ModBodyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Class string   `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`
	P     []string `protobuf:"bytes,4,rep,name=p,proto3" json:"p,omitempty"`
}

func (x *ModBodyMessage) Reset() {
	*x = ModBodyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nbodyservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModBodyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModBodyMessage) ProtoMessage() {}

func (x *ModBodyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_nbodyservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModBodyMessage.ProtoReflect.Descriptor instead.
func (*ModBodyMessage) Descriptor() ([]byte, []int) {
	return file_nbodyservice_proto_rawDescGZIP(), []int{2}
}

func (x *ModBodyMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModBodyMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModBodyMessage) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *ModBodyMessage) GetP() []string {
	if x != nil {
		return x.P
	}
	return nil
}

// A generic int arg
type ItemCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemCount int64 `protobuf:"varint,1,opt,name=item_count,json=itemCount,proto3" json:"item_count,omitempty"`
}

func (x *ItemCount) Reset() {
	*x = ItemCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nbodyservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemCount) ProtoMessage() {}

func (x *ItemCount) ProtoReflect() protoreflect.Message {
	mi := &file_nbodyservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemCount.ProtoReflect.Descriptor instead.
func (*ItemCount) Descriptor() ([]byte, []int) {
	return file_nbodyservice_proto_rawDescGZIP(), []int{3}
}

func (x *ItemCount) GetItemCount() int64 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

// A smoothing factor
type Factor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Factor float32 `protobuf:"fixed32,1,opt,name=factor,proto3" json:"factor,omitempty"`
}

func (x *Factor) Reset() {
	*x = Factor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nbodyservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Factor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Factor) ProtoMessage() {}

func (x *Factor) ProtoReflect() protoreflect.Message {
	mi := &file_nbodyservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Factor.ProtoReflect.Descriptor instead.
func (*Factor) Descriptor() ([]byte, []int) {
	return file_nbodyservice_proto_rawDescGZIP(), []int{4}
}

func (x *Factor) GetFactor() float32 {
	if x != nil {
		return x.Factor
	}
	return 0
}

// Coefficient of restitution
type RestitutionCoefficient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RestitutionCoefficient float32 `protobuf:"fixed32,1,opt,name=restitution_coefficient,json=restitutionCoefficient,proto3" json:"restitution_coefficient,omitempty"`
}

func (x *RestitutionCoefficient) Reset() {
	*x = RestitutionCoefficient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nbodyservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestitutionCoefficient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestitutionCoefficient) ProtoMessage() {}

func (x *RestitutionCoefficient) ProtoReflect() protoreflect.Message {
	mi := &file_nbodyservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestitutionCoefficient.ProtoReflect.Descriptor instead.
func (*RestitutionCoefficient) Descriptor() ([]byte, []int) {
	return file_nbodyservice_proto_rawDescGZIP(), []int{5}
}

func (x *RestitutionCoefficient) GetRestitutionCoefficient() float32 {
	if x != nil {
		return x.RestitutionCoefficient
	}
	return 0
}

// Returned to clients from all messages in the API
type ResultCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode ResultCode_ResultCodeEnum `protobuf:"varint,1,opt,name=result_code,json=resultCode,proto3,enum=ResultCode_ResultCodeEnum" json:"result_code,omitempty"`
	Message    string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResultCode) Reset() {
	*x = ResultCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nbodyservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultCode) ProtoMessage() {}

func (x *ResultCode) ProtoReflect() protoreflect.Message {
	mi := &file_nbodyservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultCode.ProtoReflect.Descriptor instead.
func (*ResultCode) Descriptor() ([]byte, []int) {
	return file_nbodyservice_proto_rawDescGZIP(), []int{6}
}

func (x *ResultCode) GetResultCode() ResultCode_ResultCodeEnum {
	if x != nil {
		return x.ResultCode
	}
	return ResultCode_OK
}

func (x *ResultCode) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_nbodyservice_proto protoreflect.FileDescriptor

var file_nbodyservice_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6e, 0x62, 0x6f, 0x64, 0x79, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6d, 0x6f, 0x6f,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0f, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x72, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xdb, 0x03, 0x0a,
	0x0f, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01,
	0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x76, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x76, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x7a,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x76, 0x7a, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x53, 0x75, 0x6e, 0x12, 0x45, 0x0a,
	0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x72, 0x61, 0x67, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0x58, 0x0a, 0x0e, 0x4d, 0x6f,
	0x64, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x01, 0x70, 0x22, 0x2a, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x20, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0x51, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x17,
	0x72, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x72,
	0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x23, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01,
	0x2a, 0x54, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x42, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x4c, 0x41, 0x53, 0x54, 0x49, 0x43, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x52, 0x41, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x2a, 0xc7, 0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x64, 0x79, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x52, 0x4b, 0x47,
	0x52, 0x41, 0x59, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x41, 0x59, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x47, 0x52, 0x41, 0x59, 0x10, 0x06, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e,
	0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06,
	0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x41, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x59, 0x41, 0x4e, 0x10, 0x0c, 0x12,
	0x0a, 0x0a, 0x06, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x42,
	0x52, 0x4f, 0x57, 0x4e, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x49, 0x4e, 0x4b, 0x10, 0x0f,
	0x32, 0xd0, 0x03, 0x0a, 0x0c, 0x4e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x0a, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0b, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0a, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0b, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x53, 0x6d, 0x6f,
	0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x07, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a,
	0x0b, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x19, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x1a, 0x0b, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6f, 0x64,
	0x69, 0x65, 0x73, 0x12, 0x0a, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x0b, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x2a,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x10, 0x2e, 0x42, 0x6f, 0x64, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x07, 0x4d, 0x6f,
	0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x0f, 0x2e, 0x4d, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0b, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x0f, 0x2e, 0x4d, 0x6f, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x10, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0e, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nbodyservice_proto_rawDescOnce sync.Once
	file_nbodyservice_proto_rawDescData = file_nbodyservice_proto_rawDesc
)

func file_nbodyservice_proto_rawDescGZIP() []byte {
	file_nbodyservice_proto_rawDescOnce.Do(func() {
		file_nbodyservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_nbodyservice_proto_rawDescData)
	})
	return file_nbodyservice_proto_rawDescData
}

var file_nbodyservice_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_nbodyservice_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_nbodyservice_proto_goTypes = []interface{}{
	(CollisionBehaviorEnum)(0),     // 0: CollisionBehaviorEnum
	(BodyColorEnum)(0),             // 1: BodyColorEnum
	(ResultCode_ResultCodeEnum)(0), // 2: ResultCode.ResultCodeEnum
	(*CurrentConfig)(nil),          // 3: CurrentConfig
	(*BodyDescription)(nil),        // 4: BodyDescription
	(*ModBodyMessage)(nil),         // 5: ModBodyMessage
	(*ItemCount)(nil),              // 6: ItemCount
	(*Factor)(nil),                 // 7: Factor
	(*RestitutionCoefficient)(nil), // 8: RestitutionCoefficient
	(*ResultCode)(nil),             // 9: ResultCode
	(*empty.Empty)(nil),            // 10: google.protobuf.Empty
}
var file_nbodyservice_proto_depIdxs = []int32{
	0,  // 0: BodyDescription.collision_behavior:type_name -> CollisionBehaviorEnum
	1,  // 1: BodyDescription.body_color:type_name -> BodyColorEnum
	2,  // 2: ResultCode.result_code:type_name -> ResultCode.ResultCodeEnum
	6,  // 3: NBodyService.SetComputationThreads:input_type -> ItemCount
	6,  // 4: NBodyService.SetResultQueueSize:input_type -> ItemCount
	7,  // 5: NBodyService.SetSmoothing:input_type -> Factor
	8,  // 6: NBodyService.SetRestitutionCoefficient:input_type -> RestitutionCoefficient
	6,  // 7: NBodyService.RemoveBodies:input_type -> ItemCount
	4,  // 8: NBodyService.AddBody:input_type -> BodyDescription
	5,  // 9: NBodyService.ModBody:input_type -> ModBodyMessage
	5,  // 10: NBodyService.GetBody:input_type -> ModBodyMessage
	10, // 11: NBodyService.GetCurrentConfig:input_type -> google.protobuf.Empty
	9,  // 12: NBodyService.SetComputationThreads:output_type -> ResultCode
	9,  // 13: NBodyService.SetResultQueueSize:output_type -> ResultCode
	9,  // 14: NBodyService.SetSmoothing:output_type -> ResultCode
	9,  // 15: NBodyService.SetRestitutionCoefficient:output_type -> ResultCode
	9,  // 16: NBodyService.RemoveBodies:output_type -> ResultCode
	9,  // 17: NBodyService.AddBody:output_type -> ResultCode
	9,  // 18: NBodyService.ModBody:output_type -> ResultCode
	4,  // 19: NBodyService.GetBody:output_type -> BodyDescription
	3,  // 20: NBodyService.GetCurrentConfig:output_type -> CurrentConfig
	12, // [12:21] is the sub-list for method output_type
	3,  // [3:12] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_nbodyservice_proto_init() }
func file_nbodyservice_proto_init() {
	if File_nbodyservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nbodyservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nbodyservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nbodyservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModBodyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nbodyservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nbodyservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Factor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nbodyservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestitutionCoefficient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nbodyservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nbodyservice_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nbodyservice_proto_goTypes,
		DependencyIndexes: file_nbodyservice_proto_depIdxs,
		EnumInfos:         file_nbodyservice_proto_enumTypes,
		MessageInfos:      file_nbodyservice_proto_msgTypes,
	}.Build()
	File_nbodyservice_proto = out.File
	file_nbodyservice_proto_rawDesc = nil
	file_nbodyservice_proto_goTypes = nil
	file_nbodyservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NBodyServiceClient is the client API for NBodyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NBodyServiceClient interface {
	// Sets the number of threads allocated to computing the body positions
	// (The render engine threading model is not modifiable at this time)
	SetComputationThreads(ctx context.Context, in *ItemCount, opts ...grpc.CallOption) (*ResultCode, error)
	// Sets the number of compute-ahead results allowed, in cases where the computation
	// thread outruns the render thread
	SetResultQueueSize(ctx context.Context, in *ItemCount, opts ...grpc.CallOption) (*ResultCode, error)
	// Changes the smoothing factor. When the body force and position computation runs
	// during each compute cycle, the force and resulting motion of the bodies is
	// smoothed by a factor which can be changed using this RPC method. The result is
	// that the apparent motion of the simulation is faster or slower
	SetSmoothing(ctx context.Context, in *Factor, opts ...grpc.CallOption) (*ResultCode, error)
	// Sets the coefficient of restitution for elastic collisions
	SetRestitutionCoefficient(ctx context.Context, in *RestitutionCoefficient, opts ...grpc.CallOption) (*ResultCode, error)
	// Removes the specified number of bodies from the sim
	RemoveBodies(ctx context.Context, in *ItemCount, opts ...grpc.CallOption) (*ResultCode, error)
	// Adds a body into the simulation
	AddBody(ctx context.Context, in *BodyDescription, opts ...grpc.CallOption) (*ResultCode, error)
	// Modifies body properties
	ModBody(ctx context.Context, in *ModBodyMessage, opts ...grpc.CallOption) (*ResultCode, error)
	// Gets body properties (use ModBodyMessage and ignore what is not needed)
	GetBody(ctx context.Context, in *ModBodyMessage, opts ...grpc.CallOption) (*BodyDescription, error)
	// Gets the current values of sim configurables
	GetCurrentConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CurrentConfig, error)
}

type nBodyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNBodyServiceClient(cc grpc.ClientConnInterface) NBodyServiceClient {
	return &nBodyServiceClient{cc}
}

func (c *nBodyServiceClient) SetComputationThreads(ctx context.Context, in *ItemCount, opts ...grpc.CallOption) (*ResultCode, error) {
	out := new(ResultCode)
	err := c.cc.Invoke(ctx, "/NBodyService/SetComputationThreads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nBodyServiceClient) SetResultQueueSize(ctx context.Context, in *ItemCount, opts ...grpc.CallOption) (*ResultCode, error) {
	out := new(ResultCode)
	err := c.cc.Invoke(ctx, "/NBodyService/SetResultQueueSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nBodyServiceClient) SetSmoothing(ctx context.Context, in *Factor, opts ...grpc.CallOption) (*ResultCode, error) {
	out := new(ResultCode)
	err := c.cc.Invoke(ctx, "/NBodyService/SetSmoothing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nBodyServiceClient) SetRestitutionCoefficient(ctx context.Context, in *RestitutionCoefficient, opts ...grpc.CallOption) (*ResultCode, error) {
	out := new(ResultCode)
	err := c.cc.Invoke(ctx, "/NBodyService/SetRestitutionCoefficient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nBodyServiceClient) RemoveBodies(ctx context.Context, in *ItemCount, opts ...grpc.CallOption) (*ResultCode, error) {
	out := new(ResultCode)
	err := c.cc.Invoke(ctx, "/NBodyService/RemoveBodies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nBodyServiceClient) AddBody(ctx context.Context, in *BodyDescription, opts ...grpc.CallOption) (*ResultCode, error) {
	out := new(ResultCode)
	err := c.cc.Invoke(ctx, "/NBodyService/AddBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nBodyServiceClient) ModBody(ctx context.Context, in *ModBodyMessage, opts ...grpc.CallOption) (*ResultCode, error) {
	out := new(ResultCode)
	err := c.cc.Invoke(ctx, "/NBodyService/ModBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nBodyServiceClient) GetBody(ctx context.Context, in *ModBodyMessage, opts ...grpc.CallOption) (*BodyDescription, error) {
	out := new(BodyDescription)
	err := c.cc.Invoke(ctx, "/NBodyService/GetBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nBodyServiceClient) GetCurrentConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CurrentConfig, error) {
	out := new(CurrentConfig)
	err := c.cc.Invoke(ctx, "/NBodyService/GetCurrentConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NBodyServiceServer is the server API for NBodyService service.
type NBodyServiceServer interface {
	// Sets the number of threads allocated to computing the body positions
	// (The render engine threading model is not modifiable at this time)
	SetComputationThreads(context.Context, *ItemCount) (*ResultCode, error)
	// Sets the number of compute-ahead results allowed, in cases where the computation
	// thread outruns the render thread
	SetResultQueueSize(context.Context, *ItemCount) (*ResultCode, error)
	// Changes the smoothing factor. When the body force and position computation runs
	// during each compute cycle, the force and resulting motion of the bodies is
	// smoothed by a factor which can be changed using this RPC method. The result is
	// that the apparent motion of the simulation is faster or slower
	SetSmoothing(context.Context, *Factor) (*ResultCode, error)
	// Sets the coefficient of restitution for elastic collisions
	SetRestitutionCoefficient(context.Context, *RestitutionCoefficient) (*ResultCode, error)
	// Removes the specified number of bodies from the sim
	RemoveBodies(context.Context, *ItemCount) (*ResultCode, error)
	// Adds a body into the simulation
	AddBody(context.Context, *BodyDescription) (*ResultCode, error)
	// Modifies body properties
	ModBody(context.Context, *ModBodyMessage) (*ResultCode, error)
	// Gets body properties (use ModBodyMessage and ignore what is not needed)
	GetBody(context.Context, *ModBodyMessage) (*BodyDescription, error)
	// Gets the current values of sim configurables
	GetCurrentConfig(context.Context, *empty.Empty) (*CurrentConfig, error)
}

// UnimplementedNBodyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNBodyServiceServer struct {
}

func (*UnimplementedNBodyServiceServer) SetComputationThreads(context.Context, *ItemCount) (*ResultCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetComputationThreads not implemented")
}
func (*UnimplementedNBodyServiceServer) SetResultQueueSize(context.Context, *ItemCount) (*ResultCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetResultQueueSize not implemented")
}
func (*UnimplementedNBodyServiceServer) SetSmoothing(context.Context, *Factor) (*ResultCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSmoothing not implemented")
}
func (*UnimplementedNBodyServiceServer) SetRestitutionCoefficient(context.Context, *RestitutionCoefficient) (*ResultCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRestitutionCoefficient not implemented")
}
func (*UnimplementedNBodyServiceServer) RemoveBodies(context.Context, *ItemCount) (*ResultCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBodies not implemented")
}
func (*UnimplementedNBodyServiceServer) AddBody(context.Context, *BodyDescription) (*ResultCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBody not implemented")
}
func (*UnimplementedNBodyServiceServer) ModBody(context.Context, *ModBodyMessage) (*ResultCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModBody not implemented")
}
func (*UnimplementedNBodyServiceServer) GetBody(context.Context, *ModBodyMessage) (*BodyDescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBody not implemented")
}
func (*UnimplementedNBodyServiceServer) GetCurrentConfig(context.Context, *empty.Empty) (*CurrentConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentConfig not implemented")
}

func RegisterNBodyServiceServer(s *grpc.Server, srv NBodyServiceServer) {
	s.RegisterService(&_NBodyService_serviceDesc, srv)
}

func _NBodyService_SetComputationThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NBodyServiceServer).SetComputationThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NBodyService/SetComputationThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NBodyServiceServer).SetComputationThreads(ctx, req.(*ItemCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _NBodyService_SetResultQueueSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NBodyServiceServer).SetResultQueueSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NBodyService/SetResultQueueSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NBodyServiceServer).SetResultQueueSize(ctx, req.(*ItemCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _NBodyService_SetSmoothing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Factor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NBodyServiceServer).SetSmoothing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NBodyService/SetSmoothing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NBodyServiceServer).SetSmoothing(ctx, req.(*Factor))
	}
	return interceptor(ctx, in, info, handler)
}

func _NBodyService_SetRestitutionCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestitutionCoefficient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NBodyServiceServer).SetRestitutionCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NBodyService/SetRestitutionCoefficient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NBodyServiceServer).SetRestitutionCoefficient(ctx, req.(*RestitutionCoefficient))
	}
	return interceptor(ctx, in, info, handler)
}

func _NBodyService_RemoveBodies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NBodyServiceServer).RemoveBodies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NBodyService/RemoveBodies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NBodyServiceServer).RemoveBodies(ctx, req.(*ItemCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _NBodyService_AddBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NBodyServiceServer).AddBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NBodyService/AddBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NBodyServiceServer).AddBody(ctx, req.(*BodyDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _NBodyService_ModBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModBodyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NBodyServiceServer).ModBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NBodyService/ModBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NBodyServiceServer).ModBody(ctx, req.(*ModBodyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NBodyService_GetBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModBodyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NBodyServiceServer).GetBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NBodyService/GetBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NBodyServiceServer).GetBody(ctx, req.(*ModBodyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NBodyService_GetCurrentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NBodyServiceServer).GetCurrentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NBodyService/GetCurrentConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NBodyServiceServer).GetCurrentConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NBodyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NBodyService",
	HandlerType: (*NBodyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetComputationThreads",
			Handler:    _NBodyService_SetComputationThreads_Handler,
		},
		{
			MethodName: "SetResultQueueSize",
			Handler:    _NBodyService_SetResultQueueSize_Handler,
		},
		{
			MethodName: "SetSmoothing",
			Handler:    _NBodyService_SetSmoothing_Handler,
		},
		{
			MethodName: "SetRestitutionCoefficient",
			Handler:    _NBodyService_SetRestitutionCoefficient_Handler,
		},
		{
			MethodName: "RemoveBodies",
			Handler:    _NBodyService_RemoveBodies_Handler,
		},
		{
			MethodName: "AddBody",
			Handler:    _NBodyService_AddBody_Handler,
		},
		{
			MethodName: "ModBody",
			Handler:    _NBodyService_ModBody_Handler,
		},
		{
			MethodName: "GetBody",
			Handler:    _NBodyService_GetBody_Handler,
		},
		{
			MethodName: "GetCurrentConfig",
			Handler:    _NBodyService_GetCurrentConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nbodyservice.proto",
}
